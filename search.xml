<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Bugku 2019-9-20 web基础$_POST]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F20%2Fbk2-post%2F</url>
    <content type="text"><![CDATA[进入题目页面显示 1234$what=$_POST[&apos;what&apos;];echo $what;if($what==&apos;flag&apos;)echo &apos;flag&#123;****&#125;&apos;; 思路阅读后，知道这是php代码，意思是，用post方式从html里获取一个名为’what’的表单值赋给php的变量$$$what。然后页面会打印出$$$what变量的值。当$$$what为’flag’时，还会输出flag。这段代码显然不是后台实际脚本，只是一个提示。根据该提示，我们提交一个$$$what变量。 writeup解法1用firefox的hackbar插件（日后写一个免费hackbar的教程）提交。然后点击Execute就可以传递了。 解法2打开bp，刷新页面这段文字是 123456789GET /post/ HTTP/1.1Host: 123.206.87.240:8002User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: closeUpgrade-Insecure-Requests: 1Cache-Control: max-age=0 （注，下面的操作也推荐在repeater里进行）把第一行的GET改成POST，把前两行之外的内容全删除。添加一行：Content-Type: application/x-www-form-urlencoded【背诵】然后再空一行并添加一行：what=flag。如下图（必须要空一行，如箭头所示）：注意flag后面不能有空格，因此要用delete清除后面的空格、空行。然后提交包，页面显示flag。 知识点 如何提交post变量 php代码阅读（基础）]]></content>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP教程 of RUNOOB]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F19%2F11php%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[本文将以我个人的视角简单叙述。本文不是零基础的，读者应有任何一门普通高级编程语言的基础学习经验。 简介建议先学一定的HTML和CSS， PHP是什么一种后端脚本语言。 PHP文件是什么包含文本、HTML、JS、PHP代码的文件，在服务器上执行，以纯HTML的形式返回给浏览器 PHP的功能简单地说，可以处理服务器上的文件、收集表单数据、收发cookies、处理数据库、限制用户访问、加密。 安装安装LAMP或LNMP就行。LAMP安装本博客已有教程。 基本语法起始PHP脚本以结尾。类似于： 123&lt;?php content;?&gt; 代码行PHP脚本中的一行行内容就是代码行，代码行以分号作结。 注释和c语言一样。然后还有井号注释。 变量PHP变量变量是什么就不多说了，PHP变量的特点是加了dollar符——$。变量命名规则也不多说了，基本常规的就行。主要不是自己写，而是看得懂。PHP是弱类型语言。 变量作用域 local global static parameter local就是局部变量，在一个函数内部声明。global是全局变量，在所有函数之外声明，在函数中调用（比如一个名为$x的变量）需要在函数中加关键字声明同样的变量： 1global $x;]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Bugku 2019-9-19 web基础$_GET]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F19%2Fbk1-get%2F</url>
    <content type="text"><![CDATA[进入题目页面显示 1234$what=$_GET[&apos;what&apos;];echo $what;if($what==&apos;flag&apos;)echo &apos;flag&#123;****&#125;&apos;; 思路阅读后，知道这是php代码，意思是，用get方式从html里获取一个名为’what’的表单值赋给php的变量$$$what。然后页面会打印出$$$what变量的值。当$$$what为’flag’时，还会输出flag。这段代码显然不是后台实际脚本，只是一个提示。根据该提示，我们让浏览器用get方式提交一个what变量值，这只需要通过url实现。 writeup直接在浏览器url后添加’?what=flag’然后有： 知识点 如何提交get变量 php代码阅读（基础）]]></content>
      <tags>
        <tag>bugku</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux小笔记——vim编辑]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F18%2F10vim%2F</url>
    <content type="text"><![CDATA[编辑模式 按i 在光标处插入 I 在头插入 按a 在光标后一位插入 A 在尾插入 按o 在下一行开始输入 O 在上一行开始输入 按r 取代一次 R 一直取代 命令模式 w 保存 w！ 强行保存只读文件 q 退出 q！ 强制退出 wq 保存并退出 e！ 还原回初始状态 w[filename] 另存为 r[filename] 读入 set nu 显示行号 set nonu 取消行号 n1 n2 w[filename] 另存n1到n2行的内容 ！command 暂时离开vim执行linux命令]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux小笔记——文件权限、用户权限]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F18%2F9linux%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[Linux用户对文件的权限主要有三种，读、写、执行。分别是r、w、x。也就是read、write、execute。 Linux用户关于文件权限的三个命令分别是ls、chmod、chown。 ls下面我挑了几个我个人觉得有用的选项-a 显示隐藏的文件（试了一下，-A好像和-a差不多，就是少了.和..）-l 单列显示，并且很详细-F 在文件名后显示类型标识符-b 用编码显示不可输出的字符-d 仅显示目录名-k 以KB显示文件大小（感觉没啥用）-m 加逗号分隔文件和目录-r 反向排序-s size，也是显示大小-t time，按更改时间排序-R 递归处理（在目录里继续lS） chmod字母模式chomod [ugoa][+-=][rexX] -R 递归-f 抑制失败错误信息数字模式ugo各一个数字r1w2x4 比如715u的权限是rwxg的权限是ro的权限是rx chownchomod id:idgroup 给用户sudo权限123$ su(输入密码)# vim /etc/sudoers 然后找到“root ALL=(ALL)ALL”这一行，然后再下一行添加：“你要赋予权限的用户名 ALL=（ALL）ALL”比如“zhanhan ALL=(ALL)ALL”]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS换中科大源【web系列4】]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F16%2F7.%E6%8D%A2%E6%BA%90%2F</url>
    <content type="text"><![CDATA[首先备份源。然后编辑源。备份过程略。首先提供编辑权限，一时半会不用改回去。 1234# cd /etc/yum.repos.d/# touch epel.repo# touch epel-testing.repo# chmod a+rwx -R /etc/yum.repos.d/ 然后在文件夹里打开到这个目录，编辑。个人觉得比vim方便。编辑CentOS-Base.repo: 123456789101112131415161718192021222324252627282930313233343536373839# CentOS-Base.repo## The mirror system uses the connecting IP address of the client and the# update status of each mirror to pick mirrors that are updated to and# geographically close to the client. You should use this for CentOS updates# unless you are manually picking other mirrors.## If the mirrorlist= does not work for you, as a fall back you can try the# remarked out baseurl= line instead.##[base]name=CentOS-$releasever - Base#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=osbaseurl=http://mirrors.ustc.edu.cn/centos/$releasever/os/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#released updates[updates]name=CentOS-$releasever - Updates# mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updatesbaseurl=http://mirrors.ustc.edu.cn/centos/$releasever/updates/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#additional packages that may be useful[extras]name=CentOS-$releasever - Extras# mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extrasbaseurl=http://mirrors.ustc.edu.cn/centos/$releasever/extras/$basearch/gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7#additional packages that extend functionality of existing packages[centosplus]name=CentOS-$releasever - Plus# mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplusbaseurl=http://mirrors.ustc.edu.cn/centos/$releasever/centosplus/$basearch/gpgcheck=1enabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7 编辑epel.repo: 123456789101112131415161718192021222324[epel]name=Extra Packages for Enterprise Linux 7 - $basearchbaseurl=http://mirrors.ustc.edu.cn/epel/7/$basearch#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-7&amp;arch=$basearchfailovermethod=priorityenabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7[epel-debuginfo]name=Extra Packages for Enterprise Linux 7 - $basearch - Debugbaseurl=http://mirrors.ustc.edu.cn/epel/7/$basearch/debug#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-debug-7&amp;arch=$basearchfailovermethod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1[epel-source]name=Extra Packages for Enterprise Linux 7 - $basearch - Sourcebaseurl=http://mirrors.ustc.edu.cn/epel/7/SRPMS#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-source-7&amp;arch=$basearchfailovermethod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1 编辑epel-testing.repo: 123456789101112131415161718192021222324[epel-testing]name=Extra Packages for Enterprise Linux 7 - Testing - $basearchbaseurl=http://mirrors.ustc.edu.cn/epel/testing/7/$basearch#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=testing-epel7&amp;arch=$basearchfailovermethod=priorityenabled=0gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7[epel-testing-debuginfo]name=Extra Packages for Enterprise Linux 7 - Testing - $basearch - Debugbaseurl=http://mirrors.ustc.edu.cn/epel/testing/7/$basearch/debug#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=testing-debug-epel7&amp;arch=$basearchfailovermethod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1[epel-testing-source]name=Extra Packages for Enterprise Linux 7 - Testing - $basearch - Sourcebaseurl=http://mirrors.ustc.edu.cn/epel/testing/7/SRPMS#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=testing-source-epel7&amp;arch=$basearchfailovermethod=priorityenabled=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-7gpgcheck=1 接着要补充一个gpg密钥文件。 12# cd /etc/pki/rpm-gpg # wget https://archive.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-7 然后应该就完事了。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux中的DVWA环境搭建【web系列5】]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F16%2F8%2F</url>
    <content type="text"><![CDATA[下载DVWA我用的系统是CentOS 7。预先要安装好LAMP环境【参考web系列3】。在DVWA官网点击Download下载DVWA环境（其实是有版本的）。 解压zip文件然后用VMware Tools复制到虚拟机中，当然直接在虚拟机里下载也行。先su一下，然后改一下目录的读写权限（我感觉改了之后很方便） 1# chmod a+rwx -R /var/www/ 然后直接把压缩包放到这个目录里。（也可以在其它目录解压到这个目录） 1234[root@localhost html]# unzip DVWA-master.zip [root@localhost html]# rm DVWA-master.zip rm：是否删除普通文件 &quot;DVWA-master.zip&quot;？y[root@localhost html]# mv DVWA-master/ DVWA 解压并删除压缩包。把目录名字修改为DVWA有必要的话，还需要多次赋予读写权限。 配置config12[root@localhost html]# cd DVWA/config[root@localhost config]# cp config.inc.php.dist config.inc.php #备份 这里就是需要config文件，备份的同时，把dist去掉，php文件作为config文件（配置文件）。编辑这个php文件，把server改为localhost，把password修改为root。 使用DVWA然后在浏览器里输入：“localhost/DVWA”就可以进入类似于下图的DVWA界面。点击Create/Reset Database后会创建数据库。然后就会跳转到登录界面。之后都会直接是登录界面。初始用户名是admin，密码是password。登录后是这样的，安装成功~]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu18.04.3安装流程【web系列2】]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F15%2F5ubuntu%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[预先安装VMware Workstation Pro 15因为我事先安装好了，所以暂时先不记录流程。这个东东是用固定序列号注册的，所以正版激活只用百度序列号。之后我会写一篇文章来讲Vmware Workstation的安装。 下载Ubuntu镜像文件在这个页面下载Ubuntu Desktop latest（LTS） 创建虚拟机1.打开VMware Workstation。点击创建虚拟机（在左上角“文件”菜单里有）。2.选择自定义！！！下一步。3.下一步。4.选择稍后安装操作系统下一步。5.然后选择Linux，下面选择Ubuntu 64位，放张图，更直观。下一步。6.然后可以改一下系统名字，安装目录建议不选系统盘（我CentOS又装错了，C盘好像占用了很多空间，一会儿再重装一次……）下一步。7.下一步。（1个内核就行）8.下一步。（2G就行）9.下一步。（NAT）10.下一步。（LSI logic）11.下一步。（SCSI）12.下一步。（创建新虚拟硬盘）13.我看到教程改成了拆分成单个文件，我们不拆。直接下一步。14.下一步。15.完成。 虚拟机安装1.按图配置ISO文件。(最后⑤的圈没圈起来)2.启动虚拟机，如果有问题，重新下载ISO文件。3.过一段时间进入安装界面，选择中文，并点击安装Ubuntu。4.之后几步一直按默认来，点击继续，直到设置用户名和密码。5.输入用户名和密码，然后选择自动登录，方便。6.然后等待安装，安装完成后重启。检查一下网络连接。如果无法进入桌面（一直黑屏）重启虚拟机，马上按E，然后进入一个有四个选项的紫色界面，在第一个选项“ubuntu”上按一次E，然后进入一个编辑界面，有点像vim。然后找到一个splash，在后面打一个空格，然后输入nomodeset。再按ctrl+X重启。 VMware Tools安装在左上角“虚拟机”菜单里点击安装VMware Tools。然后桌面会有一个光盘的图标，双击打开。复制里面的压缩包到主目录。压缩包就是下图圈的那个。然后打开终端。这里介绍一下ubuntu su进root的办法，挺重要的。就是ubuntu为了安全性，不允许su进root，但是对于服务器来说，管理员模式很重要。su进root只需要： 1234$ sudo passwd (输入原密码)（输入新密码，可以和原密码一样，建议一样）（确认新密码） 搞定之后就可以su进root了。接着我们继续 123# tar -zxvf VMware Tools-版本号.tar.gz #这里只需要输入一个V，然后按Tab键补齐就行。# cd vmware-tools-distrib# sudo ./vmware-install.pl 然后重启就可以使用VMware Tools了。重启的时候又黑屏，估计每次都得搞那个nomodeset。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7（Gnome桌面）安装流程【web系列1】]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F15%2F4centos%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[安装好的CentOS出了点问题（加之之前设置错了），而且我还把镜像文件删了（我怀疑是因为这个原因导致Gnome桌面加载不出来），因此打算重新安装一遍，顺便写一下技术文档！ 预先安装VMware Workstation Pro 15因为我事先安装好了，所以暂时先不记录流程。这个东东是用固定序列号注册的，所以正版激活只用百度序列号。之后我会写一篇文章来讲Vmware Workstation的安装。 下载CentOS镜像文件在这个页面下载DVD ISO文件。然后等下好。 创建虚拟机1.打开VMware Workstation。点击创建虚拟机（在左上角“文件”菜单里有）。2.选择自定义！！！下一步。3.下一步。4.选择默认的“安装程序光盘映像文件”，然后在你下载好的镜像文件存放目录里选择iso文件。（不要有中文目录！！！，虽然我第一次安装也有中文目录且没有什么问题）下一步。5.下一步。6.下一步。（内核数量改成2也行）7.下一步。（内存改成2G也行）8.下一步。（选择NAT）9.下一步。（LSI logic）10.下一步。（SCSI）11.下一步。（创建新虚拟硬盘）12.下一步。（20G，拆分成多个文件）13.下一步。14.下一步。（可以勾选创建后开启此虚拟机，我勾选了。） 虚拟机安装1.启动虚拟机后，选择Install centos（画面过去了，我不记得是不是叫这个了，总之有个目录，选择第一个带install的就行。）2.鼠标移动到画面内，按下Enter键。3.进入一个图形界面后选择安装语言（这个语言是安装过程中的语言），如果没有特殊需求，选用中文。4.然后会有这样的界面。在第一个本地化的设置里什么都不用修改（当然前提是和图中一样）在软件里面，修改“软件选择”，如果是最小安装的话，会只有命令行，并缺少很多常用的东西。按下图，左边选择GNOME桌面，右边选择图中这四个。5.点击系统里面的“安装位置”，什么也不用修改，确认。6.接着点下面的“网络与主机名”，把以太网开关打开，否则无法联网。7.接着点击“开始安装”，这里要设定用户名和密码，边安装边设置就行。密码建议别太长(不过我还是设置的很长)。图中这里勾上把此用户作为管理员！！！8.等待安装完成后，重启。9.重启后点击Licence Infomation，然后再点同意，确认。10.点击右下角完成配置。11.然后进入图形化登录界面。12.登陆后配置语言、输入法。在线账号那里可以跳过。13.然后就安装完毕了。 关于VMware Tools安装很重要的工具，把真实系统和虚拟机联系起来，并且可以调整虚拟机的画面大小啥的。我之前装过了……然后重装系统之后还有，迷惑。我看在Ubuntu系统上安装的时候，单独写一篇日志。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LAMP环境安装【web系列3】]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F15%2F6.LAMP%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[蓝色字体将介绍安装的软件。 环境检测全新系统不需要这一步，我暂时跳过，日后补充。 安装Apache、PHP、Mysql1.安装Apache世界使用排名第一的服务器软件，可广泛地运行于多个平台上先su进root。 1# yum -y install httpd 我的返回结果是： 1234567已安装: httpd.x86_64 0:2.4.6-89.el7.centos.1 作为依赖被安装: httpd-tools.x86_64 0:2.4.6-89.el7.centos.1 mailcap.noarch 0:2.1.41-2.el7 完毕！ 2.安装PHP一种较新的web脚本语言，php环境用来运行php程序代码输入： 1# yum -y install php 我的返回结果是： 12345678已安装: php.x86_64 0:5.4.16-46.el7 作为依赖被安装: libzip.x86_64 0:0.10.1-8.el7 php-cli.x86_64 0:5.4.16-46.el7 php-common.x86_64 0:5.4.16-46.el7 完毕！ 3.安装php-fpmphp的fastCGI process manager，CGI是通用网关接口（Common Gateway Interface）,fast就是快速。web服务器（我们的是Apache）本身不能解释php语言，服务器将php请求交给FastCGI进程管理来处理。对于5.3.3之前的php环境，应该只有安装了php-fpm，才能让服务器解释php文件。我的php版本为5.4.16，我特意卸载掉php-fpm依然可以在localhost里打开php文件。输入： 1# yum -y install php-fpm 我的返回结果是： 1234已安装: php-fpm.x86_64 0:5.4.16-46.el7 完毕！ 4.安装Mysql一种流行的DBMS（关系型数据库管理系统）输入： 1# yum -y install mysql 我的返回结果是： 1234已安装: mariadb.x86_64 1:5.5.60-1.el7_5 完毕！ 5.安装Mysql-serverMysql的服务器，是Mysql的核心程序这一步要先换源！！！【参考web系列4】这里用yum会出错，这是作者怕Mysql闭源的结果。无法使用下面的命令： 1# yum -y install mysql-server 直接从官网下载Mysql-server就可以了输入： 123# wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm #这个命令我用的时候有问题，也可以直接在windows里输入后半部分URL，然后用VMware Tools弄到CentOS主文件夹里。可能是少了-i# rpm -ivh mysql-community-release-el7-5.noarch.rpm2# yum install mysql-community-server 输入y继续。耐心等候。（这个过程很快，如果不快就换源，阿里云的好像不行，中科大的快）我的返回结果是： 123456789101112已安装: mysql-community-server.x86_64 0:5.6.45-2.el7 作为依赖被安装: perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 perl-DBI.x86_64 0:1.627-4.el7 perl-IO-Compress.noarch 0:2.061-2.el7 perl-Net-Daemon.noarch 0:0.48-5.el7 perl-PlRPC.noarch 0:0.2020-14.el7 完毕！ 6.安装php-mysql应该是php和Mysql的接口工具之类的（百度不到）输入： 1# yum -y install php-mysql 我的返回结果是： 1234567已安装: php-mysql.x86_64 0:5.4.16-46.el7 作为依赖被安装: php-pdo.x86_64 0:5.4.16-46.el7 完毕！ 安装基本常用扩展包1.安装Apache扩展包输入： 1# yum -y install httpd-manual mod_ssl mod_perl mod_auth_mysql 我的返回结果是： 1234567891011121314151617已安装: httpd-manual.noarch 0:2.4.6-89.el7.centos.1 mod_perl.x86_64 0:2.0.10-3.el7 mod_ssl.x86_64 1:2.4.6-89.el7.centos.1 作为依赖被安装: gdbm-devel.x86_64 0:1.10-8.el7 libdb-devel.x86_64 0:5.3.21-24.el7 perl-BSD-Resource.x86_64 0:1.29.07-1.el7 perl-ExtUtils-Install.noarch 0:1.58-294.el7_6 perl-ExtUtils-MakeMaker.noarch 0:6.68-3.el7 perl-ExtUtils-Manifest.noarch 0:1.61-244.el7 perl-ExtUtils-ParseXS.noarch 1:3.18-3.el7 perl-Linux-Pid.x86_64 0:0.04-18.el7 perl-devel.x86_64 4:5.16.3-294.el7_6 systemtap-sdt-devel.x86_64 0:3.3-3.el7 完毕！ 2.安装PHP扩展包输入： 1# yum -y install php-gd php-xml php-mbstring php-ldap php-pear php-xmlrpc php-devel 我的返回结果是： 1234567891011已安装: php-devel.x86_64 0:5.4.16-46.el7 php-gd.x86_64 0:5.4.16-46.el7 php-ldap.x86_64 0:5.4.16-46.el7 php-mbstring.x86_64 0:5.4.16-46.el7 php-pear.noarch 1:1.9.4-21.el7 php-xml.x86_64 0:5.4.16-46.el7 php-xmlrpc.x86_64 0:5.4.16-46.el7 作为依赖被安装: pcre-devel.x86_64 0:8.32-17.el7 php-process.x86_64 0:5.4.16-46.el7 t1lib.x86_64 0:5.1.2-14.el7 完毕！ 3.安装Mysql扩展包输入： 1# yum -y install mysql-connector-odbc mysql-devel libdbi-dbd-mysql 我的返回结果是： 12345678910已安装: libdbi-dbd-mysql.x86_64 0:0.8.3-16.el7 mysql-community-devel.x86_64 0:5.6.45-2.el7 mysql-connector-odbc.x86_64 0:8.0.17-1.el7 作为依赖被安装: libdbi.x86_64 0:0.8.4-6.el7 libdbi-drivers.x86_64 0:0.8.3-16.el7 unixODBC.x86_64 0:2.3.1-11.el7 完毕！ 配置Apache、Mysql开机启动（这样更方便）123456# systemctl enable httpd.service #设置apache开机启动(返回如下)Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.# systemctl enable mysqld.service #设置mysql开机启动（没有返回结果） 重启检验是否开机启动 12# service mysqld status# service httpd status 配置Mysql设置密码输入： 12345# mysql_secure_installation（回车）（回车）（输入密码，不显示，我输入的是root）（回车4次，完成设置） 测试环境测试Apache在虚拟机的浏览器（firefox）里打开“http://localhost/”应该会如图有这样的界面，如果没有说明有问题，或者apache没有启动。没有启动要用 12# service httpd status #确定是否启动# service httpd start #启动 测试php123# cd /var/www/html# touch phpinfo-test.php #这个名字无所谓的# vim phpinfo-test.php 写一个简单的php文件： 123&lt;?phpphpinfo;?&gt; 然后保存退出，浏览器力打开“localhost/phpinfo-test.php”如果出现下图，则php安装成功。]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[时域分析]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F13%2F3%2F</url>
    <content type="text"><![CDATA[小结1.动态元件电感电容这类其上电压电流呈导数关系的元件。 2.稳态电路量为常量或周期量的电路工作状态称为稳态。 3.换路改变电路工作状态的因素。 4.暂态动态元件吸收或释放元件的过渡过程就是暂态。 5.时域分析的思想暂态过程是一段时间，这段时间上，电路量发生改变，而这些电路量的改变可以用关于时间的函数来刻画。因此，利用电路结构方程和欧姆定律以及动态元件端口特性方程，我们可以列写以t为因变量的微分方程。主要是简单的一阶微分方程，可以套用公式来解。为了得到唯一解，还需要确定初始条件。初始条件的确定利用换路定律和直流电路分析（把换路瞬间认为是直流，并且对动态元件使用置换定理）。【判断符号时，变化量是增大还是减小，根据实际情况确定】 6.初始值的确定第五点里已经提到了，很简单。 7.一阶电路的零输入响应RC电路零输入响应（与其说是响应，不如说是各种电路量）最终解得 $u_C=U_0e^{-\frac{t}{RC}}$ $i_C=\frac{U_0}{R}e^{-\frac{t}{RC}}$ $u_R$就不用说了。 时间参数$\tau$为$RC$这种类型的电路，在变路时，电容放电，产生较大放电电流。 GL电路零输入响应最终解得 $i_L=I_0e^{-\frac{Rt}{L}}$ $u_L=-RI_0e^{-\frac{Rt}{L}}$ $i_R$就不用说了。 时间参数$\tau$为$\frac{L}{R}$这种类型的电路，在变路时，电感释放磁场，产生较大电场，也即产生较大电动势。断开含高阻值电阻的电感电路时，开关上可能会形成巨大的电压，因此要减小等效电阻再切断电路，以免发生危险。 8.阶跃函数$\varepsilon(t)$就是单位阶跃函数。$\varepsilon(t-t_0)$是延迟单位阶跃函数$\varepsilon(t)-\varepsilon(t-t_0)$是一种矩形脉冲。也记作$G(t)$。$tG(t)$是一种锯齿形脉冲。 9.冲激函数冲激函数是一种作用时间很短的脉冲信号，但是它具有脉冲强度。是一种奇异函数。单位冲激函数记作$\delta(t)$，其脉冲强度为1。$K\delta(t)$是一般的冲激函数，K的单位是库伦或者韦伯。动态元件的快速变化可以视为一个一般冲激函数。这种变化中，换路定律将不再成立。（这种很快的变化是理想的，实际中不存在），换句话说，暂态过程也非常快，几乎认为不需要时间。 10.一阶电路的阶跃响应我们讨论的阶跃响应是零状态响应。我们列出的微分方程为一阶非齐次微分方程。 特解特解是稳态分量 齐次方程通解$u_C=-Ae^{\frac{t}{RC}}$齐次方程通解是暂态分量 通解$U_C=U_S(1-e^{\frac{t}{RC}})\varepsilon(t)$$i_C=\frac{U_S}{R}e^{\frac{t}{RC}}$ 单位阶跃特性$s(t)=\frac{u_C(t)}{U_S}=(1-e^{\frac{t}{RC}})\varepsilon(t)$ 所以通解为$U_Ss(t)$ 11.一阶电路的冲激响应设$u_S$是宽度为$\Delta\xi$，幅度为$\Psi/\Delta\xi$的矩形脉冲电压。拆解为两个幅度为$\Psi/\Delta\xi$的阶跃电压的叠加。$u_S=u_S’+u_S’’=\frac{\Psi}{\Delta\xi}(\varepsilon(t)-\varepsilon(t-\Delta\xi)$再用阶跃特性计算响应。有：$u_C=\frac{\Psi}{\Delta\xi}(s(t)-s(t-\Delta\xi))$又因为$\Delta\xi$趋于0，所以，$u_C=\Psi\frac{ds(t)}{dt}$$u_C=Ue^{\frac{t}{\tau}\varepsilon(t)}$i_C=$[Q\delta(t)-\frac{U}{R}]e^{\frac{t}{\tau}}$冲激响应的初始值不适用于换路定律，因为是奇异函数。类似于零输入响应 单位冲激特性$h(t)=\frac{ds(t)}{dt}$ 12.正弦电源作用下的一阶电路$u_S=U_mcos(\omegat+\Psi_u)$$\Psi_u$是开关接通时刻电源的相位，称为接入相角。首先确定稳态解，直接把正弦电压向量除以阻抗就好了。然后求齐次方程通解，为$Ae^{-\frac{t}{\tau}}$，A是积分常数。接下来利用初始值确定积分常数，A为特解在0+时的负值。【当$\Psi_u-\phi=\frac{\pi}{2}或-\frac{\pi}{2}时没有暂态$】【当$\Psi_u-\phi=\pi或-\pi，会产生较大响应，电气设备要注意防范。$】 13.一阶电路的全响应一阶电路的全响应可以分为零输入响应和零状态响应。]]></content>
      <tags>
        <tag>电路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10利用Github+Hexo建个人博客]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F12%2F1%2F</url>
    <content type="text"><![CDATA[任何已完成的步骤可以跳过。参考的主要原文点击 这里、这里（推荐）和这里【但是我认为里面会有一些错误，所以尽量以本文为主】 1.注册Github账号这个环节非常简单，只需要打开Github官网，然后在右上角的sign up处注册就可以了。在第一个环节有个小测试（来测试你是否是机器人、AI、程序啥的），有时候浏览器可能无法加载，这个时候可以尝试用手机浏览器解决。根据实践，苹果自带的safari是可以完成注册的。 2.创建Github仓库在Github首页（或许包括绝大多数页面）可以找到New Repository按钮，Repository就是仓库。仓库名称为你的用户名.github.io。用户名就是你注册设置的那个玩意儿。我的用户名是unln1999，可能你不知道它是什么意思，反正这就是我的用户名。那么我的仓库名就是unln1999.github.io。【应该是可以设置为其它名字的，但是不建议第一次就特立独行，Github大佬自行设置qaq】选择类型为Public，如果是Private就无法成为一个大家都能看到的网站了（大概是这样）其它设置不需要变，点击Create Repository按钮即可。 3.安装Git在Git官网的下载页面直接下载你对应系统的Git，这里以windows系统为例。一般打开这个页面应该能够看到一个显示器的图像，点击里面的那个按钮“Download 版本号 for windows”就可以下载安装包了。然后在本地双击安装包，一直按默认设置点下一步即可。（当然大佬可以自己配置）装好之后，在任何文件夹（包括桌面）右键都可以使用Git Bash终端了 4.安装Nodejs在Nodejs官网的下载页面直接下载你对应系统的对应位数（目前一般是64位）的.msi安装包。然后在本地双击安装包，在下图的界面里选择Add to PATH，然后接下来只用一直点击下一步即可。（之前我自己变动了一个选项，导致没装好，重新装了一次，所以建议不改默认配置） 5.安装HEXO在Git Bash里输入 1$ npm install -g hexo-cli 就会开始安装HEXO，安装过程会有点慢，如果你中途想要关闭终端，它会提示正在工作，因为Git Bash有时候（就我目前使用来看）不会显示进程详情，所以只能通过右上角点关闭来判断终端是否在工作。耐心等待，HEXO就安装好了。可以输入HEXO -v确定是否安装完毕。 6.创建博客在本地选择一个合适的目录，比如我选在了D:\博客环境。然后再这个目录下右键Git Bash Here。输入 1234$ hexo init 你的用户名.github.io #创建博客$ cd 你的用户名.github.io #进入该目录$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题，也可以用别的主题，自行百度hexo主题$ npm install hexo-deployer-git --save #安装hexo自动部署发布工具，有了这个才能部署，所谓部署就是上传到Github上 在资源管理器（也就是常说的文件浏览器什么的）中进入博客目录（比如我的D:\博客环境\unln1999.github.io）,然后用编辑器（推荐notepad++）打开_config.yml。进行一些基本设置，以下是一些基本的设置项，我用我的设置作为参考 基本设置12345678# Sitetitle: 夢の此夜亭🌸 #博客的名称，类似于网页名称subtitle: A Blog with Tiny Fantasy #副标题description: 记录CTF学习之路上的各种收获，和同学们分享，共同进步~ #这个好像不显示，写不写也无所谓keywords: #不懂，空着先author: 英和路雪 #作者名，其实无所谓，随便填language: zh-Hans #汉语，这个应该比较重要timezone: Asia/Shanghai #时区 主题设置（选择刚才下的yilia或者你自己下的主题）1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: yilia 重要设置（这里的设置网上有很多种，按我的来吧）12345678910111213# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://unln1999.github.io/unln1999.github.io #这个是真实URL，也就是说你在网页里输入unln1999.github.io就可以访问博客了root: /unln1999.github.io/ #这个是根目录，也就是你本地的文件夹名，刚开始我们创建博客用的文件夹名是和网址相同的（D:\博客环境\unln1999.github.io），如果取的名字是别的，比如blog，那么这里是/blog/，url也要改为https://unln1999.github.io/blogpermalink: :year/:month/:day/:title/permalink_defaults:# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git #这里应该必须设置为git，不能设置为github之类的 repository: https://github.com/unln1999/unln1999.github.io.git #注意结尾是.git，这里参考网址2里说的我认为有误 branch: master #设置为master 8.配置SSH（我不确定是否必须，如果无法上传到Github的话，执行此步，否则可以不用。所以先看第九步）第一次使用要配置Git的一些东东，如果不是，估计你也知道SSH是啥了（反正我不知道qaq）在Git Bash里操作即可，如下：(注意按tab键可以补齐) 123456$ git config --global user.name &quot;随便写一个名字&quot;$ git config --global user.email &quot;你的邮箱&quot;$ ssh-keygen -t rsa -C &quot;你的邮箱&quot; #生成SSH$ cd ~/.ssh$ cat i（按Tab）（按.）（按Tab）【注：上一行打全了是 $ cat id_rsa.pub】 然后会出现一串东西，复制一下。打开Github，进入settings，按下图配置SSH。 9.写博文和部署博文在博客目录里的/source/_posts/中。一开始会有一个hello world.md文件。可以把它删掉、修改或者留着做测试，也可以阅读一下（反正我没读……）学习一下markdown就可以写出漂亮的文章了，并不难！ 每次更新了博客文章或者设置，首先在博客根目录下，打开Git Bash，输入 1$ hexo s 来进行测试，在浏览器里输入localhost:4000就可以进入测试页面了（注意图片无法显示，但是上传到Github上就可以了）如果4000端口被占用就百度一下，关键词“Hexo”、“4000占用”测试没问题了就可以部署了。 部署的时候，也是在博客根目录下，打开Git Bash，然后输入 1$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d #就用这个就行了，想要深入研究自行百度Hexo命令 这个时候在浏览器里输入 你的用户名.github.io就可以访问你的个人博客啦（当然你部署的时候得联网）。 10.其它 可能在hexo s时会报错，这里有几个参考的可能。一个是config文件里面的键值对（学过数据库的都知道），冒号后面要加空格。此外冒号必须用英文的冒号。 编辑的时候，尽量关闭测试（按Ctrl + C）。 测试要频繁，以免不知道自己哪里出错了。 隔一段时间要给博客做备份。把根目录压缩就可以了。 关于主题的配置自行研究。（/themes/主题名 里面也有一个config文件） 关于markdown的一系列操作也请百度学习。重要的内容会在之后的博文里更新。 部署到GitHub要有半分钟到一分钟后才能看到效果，毕竟上传要时间嘛。 第一次部署应该会要输入Github账号密码，如果没有，则说明配置有问题。可能可以部署，但是会没有样式。但是按我以上的配置应该是可以成功部署的。]]></content>
      <tags>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DVWA-SQL Injection Low级]]></title>
    <url>%2Funln1999.github.io%2F2019%2F09%2F01%2F2%2F</url>
    <content type="text"><![CDATA[斜体部分存疑，可能会有知识错误。 探究部分1.什么是SQL注入？SQL注入的英文全称是structrued query language injection。也即SQL injection。 谈论SQL注入必须首先了解什么是SQL。根据英文易知，SQL其实就是结构化查询语言的意思，是一种编程语言。用于查询和操作RDBMS（relational database management system，关系数据库管理系统）中的数据。 我们也容易见到MySQL、SQL server、oracle，这是三种常用且传统的RDBMS，传统的RDBMS都有统一的SQL语言操作接口（也就是说可以用SQL操作，根据了解并推测，传统RDBMS也只能用SQL语言来对数据进行查询和操作&lt;如果涵盖pl/sql等&gt;）。此外还有NoSQL数据库，这些数据库有自己特有的API接口，他们能做到传统RDBMS做不到的事，因此也有广泛应用。 许多网站的数据库都是这三种数据库之中的，因此利用页面表单来获取数据库信息时，在服务器中的程序（asp、php等编写的脚本程序）中必然要用到SQL语言，根据页面反馈的信息，我们可以推测这段SQL语句是如何书写的。假如我们可以利用这个SQL语句设计上的漏洞，我们就可以在执行或终止执行原有的SQL语句的基础上，执行我们想要执行的SQL命令，来获取数据库信息。 总之，SQL注入就是利用页面脚本设计中的漏洞在表单中插入SQL语句，欺骗服务器执行“恶意”的SQL命令。 备注：按百度百科的说法，还可以利用域名、页面请求来进行SQL注入。利用域名的我好像有看到过，页面请求不太懂是什么意思。在百度查后两种SQL注入找不到详细的介绍（在第一页）。在写这篇笔记到这里的时候，我才过了DVWA的low级SQL injection渗透测试，对利用表单进行SQL注入有一定的认识，而后两者还不了解。因此上文写到“在表单中插入SQL语句”。 2.SQL注入有哪几种方式？ 字符型注入：当表单要求获得字符时，传递到$query变量（或其它意义相同的SQL查询语句等）中时需要单引号或双引号，这时，如果表单中不对转义序列’或”进行过滤的话，就可能进行字符型注入。 数字型注入：当表单要求获得数字时，传递到$query变量（或其它意义相同的SQL查询语句等）中时，将没有单引号或双引号，直接输入数字+分号+想要服务器执行的SQL语句+注释– 就可能进行数字型注入。 利用数据库服务器的漏洞（不懂） 盲注（不懂） 根据条件响应（不懂） 条件性差错（不懂，大概是猜测数据库中的数据，如果数据存在会引起报错，从而得知特定数据的存在性） 时间延误（不懂，通过长SQL命令队列等，使服务器产生时间延误，也就是加载时间，通过时间长短，判断语句是否为真） 备注：这一部分主要从网上摘抄，前两个的详解是我个人目前的认识，也有可能不甚正确，因为前两种更为常见且比较简单，了解更多，后面几种了解甚微，原理一知半解。 3.如何避免SQL注入？ 首先要防范用户输入，永远不能信任用户输入，要对用户输入做出限制，比如禁止使用转义序列，甚至禁止使用特殊符号乃至禁止使用字母。简单的禁用还可以被绕过，比如AND被禁用了，有时可以用&amp;&amp;或者%26%26来代替，因此禁用有等级的区分，并且禁用部分输入对SQL注入的防范能力是有限的，可能会牺牲系统（指网站及其脚本）的性能等。因此不要简单认为禁用部分输入之后就可以一劳永逸。 不使用动态拼装的SQL语句，使用参数化的SQL语句（根据一个站点的介绍，asp、php不能够使用参数化SQL，因此要另寻它径，但是java、C#等语言可以） 每个应用对数据库的访问设限。比如DVWA靶机里的low级SQL注入就是一个很简单的根据id获取姓名的应用，不应该让它具有访问其它重要数据库的能力。 加密机密信息，即使泄露也难以破解。 对错误信息进行包装，或者抑制等等，不给用户“明注”（相对于“盲注”）的机会。后文的low级SQL注入中就大方地公开了错误信息，使得注入思路较为明确。SQL injection low级手工注入实践后台脚本源码12345678910111213141516171819202122232425262728293031323334353637&lt;?phpif( isset( $_REQUEST[ &apos;Submit&apos; ] ) ) &#123; // Get input $id = $_REQUEST[ &apos;id&apos; ]; // Check database $query = &quot;SELECT first_name, last_name FROM users WHERE user_id = &apos;$id&apos;;&quot;; $result = mysqli_query($GLOBALS[&quot;___mysqli_ston&quot;], $query ) or die( &apos;&lt;pre&gt;&apos; . ( (is_object($GLOBALS[&quot;___mysqli_ston&quot;])) ? mysqli_error($GLOBALS[&quot;___mysqli_ston&quot;]) : ( ($___mysqli_res = mysqli_connect_error()) ? $___mysqli_res : false ) ) . &apos;&lt;/pre&gt;&apos; ); // Get results while( $row = mysqli_fetch_assoc( $result ) ) &#123; // Get values $first = $row[&quot;first_name&quot;]; $last = $row[&quot;last_name&quot;]; // Feedback for end user $html .= &quot;&lt;pre&gt;ID: &#123;$id&#125;&lt;br /&gt;First name: &#123;$first&#125;&lt;br /&gt;Surname: &#123;$last&#125;&lt;/pre&gt;&quot;; &#125; mysqli_close($GLOBALS[&quot;___mysqli_ston&quot;]);&#125;?&gt; 解读后台脚本由php书写。 第一部分得到表单的值，当submit按钮被按下时，判断为真，执行后续语句——将name为’id’的input表单的值赋给变量$id。 声明字符串变量$query，其值为”SELECT first_name, last_name FROM users WHERE user_id = ‘$id’;” 因为这里是双引号，所以里面的变量$id会被表单中提交的内容所代替。 整个$query就是一个典型的SQL SELECT语句。根据《SQL参考手册》，SELECT语句可以为以下两种形式。 它的用处是在某张数据表中检索对应字段的数据并返回给用户。 接下来的mysqli_query()是php函数，语法如下： $GLOBALS[“___mysqli_ston”]是一个全局变量的写法，在这里用于MySQL连接。 $query即为查询字符串，这里之所以先声明这个变量，是为了阅读、处理、修改等的方便。 当SELECT语句查询成功时，mysqli_query()函数返回mysqli_result 对象，则$result也为一个object。 在php的bool or bool语句中，前一个为真，后一个bool值将不再被判断。（前一个值的数据类型可能不是布尔类型，但也对应真假） 因此此时or之后的语句将不再被执行。 然后将这个对象传递给mysqli_fetch_assoc()函数，来取得一行来作为关联数组。然后这里的while循环应该有一定执行次数，这大概和对象有关，因为我没有系统学习的面向对象编程的知识，这里无法详解while循环的执行过程，只能抽象地概括为，不断地从数据库中获取数据。 让变量$first获得”first_name”键对应的值，让变量$last获得”last_name”键对应的值。 $html是显示页面的变量，利用运算符”.=”在其后面加入&lt;pre&gt;标签来显示文本。 如果查询语句出错，则结束脚本，并进行嵌套的三元运算，首先判断$GLOBALS[“mysqli_ston”]是否是个对象，如果不是，那么检查连接有无错误，如果有，报错。如果无，说明数据库中没有对应id的记录。假如$GLOBALS[“mysqli_ston”]是对象，那么是用户输入有问题，利用mysqli_error()获得最近调用函数的最后一次错误并报错。这里的报错，为SQL注入提供了切入点。 SQL注入的思路则是在不知道脚本代码的情况下，推测出$query变量的值的形式，并在后续插入我们想要服务器执行的SQL命令。然后在mysqli_query()函数中发挥作用，取得mysqli_result对象。 实战1.输入数字1 得到正常的结果，还无法判断是否存在数字型、字符型注入。 根据URL中的显示，判断表单传递方式为GET。 2.输入’（判断是否存在注入以及类型） 得到报错信息：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’’’’ at line 1 可知第一行里出现了’’’，不是偶数，程序出错，有注入的可能。 3.输入” 无反应，也无报错，说明一切正常，只是数据库中没有id为’”‘的记录。 4.输入反斜杠\（反斜杠可以使有特殊功能的字符变成普通的字符，容易造成语句错误） 得到报错信息：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’&#39;‘ at line 1 可知第一行里出现了’\‘，并结合先前的试验，可以推测，这一块的内容类似于： ‘$_GET[‘id’]’ 因此，我们输入的字符串，被夹在两个单引号之间。 现在我们可以用诸如“1’;SQL语句；– ”、“1’ SQL语句 – ”来进行注入。或者就是“’;SQL语句；– ”、“’SQL语句 – ” 而这里需要的SQL语句需要一定的SQL基础。 备注：书写笔记至此，我为了能看懂SQL注入中究竟输入了些什么，已经学会了html基础、一半的基础CSS、大半的php，但是对SQL掌握不多，但是我会用SQL参考手册进行尝试。 5.输入永真语句’or 1(Select语句对每一行都是真的，因此$row遍历每一个记录并输出) 由此看出，该数据表的row为5行，尝试发现id是1、2、3、4、5。 至此可以判断url（http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=&amp;Submit=Submit#）中的参数id存在注入点，存在字符型的SQL注入漏洞。 6.输入’ order by 3 – 利用order by语句搭配SELECT语句得知字段数(这里的数字应该是指第几个column) 当为3时报错：Unknown column ‘3’ in ‘order clause’ 因此字段数为2。 *7.或者用union select语句，union是一种高级的SQL操作符，比如输入’ union select 3，4 -- * ![image]/img/2-5.png) 之所以是这么显示，是因为第一个单引号为空，不对应任何字段。后面的union select根据SQL参考手册，column数必须与前面的相同。 同时我们利用union select获得了字段显示的位置，Web中，第一个字段显示在First name处，第二个字段显示在Surname处。 8.输入’ union select database(),version() – 利用SQL内置函数+不加from的union select语句得到数据库信息。 可知，数据库名称为dvwa，版本是5.5.53。 8.输入’ union select user(),version() -- 利用SQL内置函数+不加from的union select语句得到当前使用的用户信息。 9.输入’ union select @@version_compile_os,@@datadir -- 得到服务器的操作系统信息和数据库的存储目录（@@表示全局变量，类似于php里的$_GLOBAL[]） 10.现在加入from，从MySQL默认创建的数据库里获取需要的信息，先从infomation_schema（纲要）库中schemeta表中获取所有数据库的信息。 ![image]/img/2-9.png) 11.现在再在infomation_schema库的schemeta表中，对当前所用的数据库的表进行查询。 还有一种高端的写法： 备注：schemeta指数据库、table指表。information_schema数据库中的表及列都是固定而有规律的。这之后都是按经验、套路办事了。 12.获取users表中的列信息 13.获取用户名和密码：’ union select user,password from dvwa.users -- (这个注入命令是我找规律自己写的，可见我基本懂了，只是对information_schema库不熟悉) 猜测这是md5密文（有经验后，现在我没经验），发现可以登录dvwa靶机，SQL injection low级成功。 关于SQL map这里将不详讲，我照葫芦画瓢成功安装了SQL map。 在安装SQL map的时候需要安装python2。 在有python3的环境下，可以使用虚拟环境virtualenvwrapper。 利用SQL map可以方便地进行SQL注入测试与渗透。 参考网址（部分失效）：百科：https://baike.baidu.com/item/sql注入/150289?fr=aladdin CSDN一篇学习者日志: https://blog.csdn.net/ideality_hunter/article/details/80623526 上面那篇日志提到的参考：https://www.cnblogs.com/sdya/p/4568548.html 上面那篇参考的原文：https://www.cnblogs.com/rush/archive/2011/12/31/2309203.html 绕过过滤器：https://www.jianshu.com/p/a98edc0d2438 新人训练营：https://www.freebuf.com/column/184285.html 另一个SQL练习教程：https://blog.csdn.net/weixin_40586270/article/details/81631191 DVWA环境搭建：https://www.cnblogs.com/ECJTUACM-873284962/p/7784508.html Pip更新：http://www.51hsw.com/python-pipban-ben-geng-xin-de-wen-ti/ SQL map基本操作：https://www.jianshu.com/p/17509d0a1ba3 Phpstudy端口被占用：https://blog.csdn.net/weixin_43571641/article/details/83903804 全等级盲注：https://www.jianshu.com/p/757626cec742 low级手工注入：https://www.jianshu.com/p/54b630f1ec35 参数化SQL：https://www.cnblogs.com/yuyu666/p/9828065.html 未使用网址： 关于过滤SQL注入的文章：https://www.yuanmas.com/info/dnzlQnqqa6.html 关于post提交SQL数据：https://zhidao.baidu.com/question/1610843988763312667.html]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
